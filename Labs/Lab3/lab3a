;Katerina Chinnappan
;CRUZID: kachinna
;LAB 3




;R1 USE FOR OUR INT
;R2 USE FOR OUR FLAG
;R3 AS A TEMP REGISTER TO COMPARE
;R4 IS OUR CHAR
;R5 HAS OUR BINARY STRING
;R6 NOT USED
;NOT USED BC OF JSR/RET



	.ORIG X3000
	LEA R0, GREETING
	PUTS

ENTERINPUT
	LEA R0, USERINPUT
	PUTS
	AND R1, R1, 0			;INT = 0
	AND R2,R2, 0			;FLAG = 0

READINPUT
	GETC
	OUT
	LD R4, EXIT			;LOAD 'x' INTO R4
	ADD R3, R0, R4			;COPY R4 TO R3 TEMPORARILY FOR COMPARISON
	BRnp CENTERPROCESS		;IF USER ENTERED SOMETHING ELSE OTHER THAN 'x', GO TO THIS PROCEDURE
	LEA R0, BYE			;LOAD GOOD BYE MESSAGE
	PUTS
	HALT				;STOP THE PROGRAM

CENTERPROCESS
	ADD R3, R0, -10			;LINE FEED 
	BRz TWOSCOMPLEMENT		;IF CHAR == LF
	LD R4, NEGATIVE			;LOAD '-' INTO R4
	ADD R3, R0, R4			;FOR COMPARIOSN PURPOSE
	BRz FLAGGOBACKINPUT		;IF CHAR == '-' GO TO THIS PROCEDURE
	LD R4, ZERO			;LOAD -48 INTO R4
	ADD R0,R0,R4			;SINCE CHAR != -, SUBTRACT 48 FROM THE ENTERED CHAR
	JSR MULTISETUP			;JUMP TO THIS SUBROUTINE. WHEREEVER WE SEE RET, IT WILL TAKE US BACK TO THIS PROCEDURE
	ADD R1, R1, R0			
	BR READINPUT			;GO BACK TO THIS PROCEDURE UNDER ANY CONDITION

FLAGGOBACKINPUT
	ADD R2, R2, 1			;FLAG == 1
	BR READINPUT			;GO BACK TO READINPUT NO MATTER WHAT

TWOSCOMPLEMENT
	ADD R2, R2, -1			;FLAG == 1 (NEGATIVE)
	BRn PREPARE			;FLAG != 1 (1 < 0 WHICH IS FALSE)
	NOT R1, R1			;INVERT, INT != INT
	ADD R1, R1, 1			;ADD 1, INT = INT + 1

PREPARE
	LEA R0, THANKYOU		;LOAD THANK YOU MESSAGE
	PUTS
	BR BINARYCONVERSION		;GO TO BINARYCONVERSION NO MATTER WHAT


MULTISETUP
;---------------------PREPARING THE LOOP FOR MULTIPLYING---------------------
	
	ADD R3, R1, 0			;ADD O TO R1 AND VALUE IN R3
	AND R4, R4, 0			;SET R4 TO 0	
	ADD R4, R4, 9			;0 -9 (R4 = COUNTER, LOOP 10 TIMES)


MULTIPLICATION
	BRz RETURN			;GO HERE TO ENTER MORE THAN ONE CHAR(DIGIT)
	ADD R1, R1, R3			;INT = INT X 10 + DIGIT
	ADD R4, R4, -1			;DECREMENT COUNTER
	BR MULTIPLICATION		;MULTIPLY UNTIL DONE (NO CONDITION)


	
BINARYCONVERSION
	LEA R4, MASK			;MASK INTO R4
	AND R2, R2, 0			;FLAG == 0
	ADD R2, R2, 15			;MASK = 1ST MASK ADDRESS (COUNT = 15)
	LD R5, ZERO1			;THESE ARE THE 0 IN THE 16 BIT STRING

GOMASK
	BRn END				;IF COUNT <0, GO TO THIS PROCEDURE
	LDR R3,R4,0			;PUT MASK VALUE AT THAT ADDRESS TO R3
	AND R0,R1,R3			;AND THE 16 DIFFERENT MASKS, SEARCH FOR 1 WHEREVER MATCHES
	BRz DISPLAY			;IF DIGIT == 0, GO TO DISPLAY
	AND R0,R0,0			;R0 SET TO ASCII O 1, IF OUTPUT NOT 0
	ADD R0, R0,1

DISPLAY
	ADD R0,R0,R5			;BINARY STRING (EACH TIME DISPLAY BRANCHES TO OUTPUT,THE NEW BIT IS ADDED) 
	OUT				;PRINT THE BINARY STRING
	ADD R4,R4,1			;STORE ADDRESS OF NEXT MASK TO USE
	ADD R2, R2, -1			;DECREMENT AMT OF MASKS LEFT NEEDED TO USE
	BR GOMASK			;KEEP ON BRINTING	

RETURN
	
	;LD R3, 0			;LOAD 0 INTO R3
	;LD R4, 0			;LOAD 0 INTO R4 BEFORE GOING BACK TO CENTERPROCESS
	RET 				;RETURN BACK TO CENTERPROCESS
					;AND CONTINUE WTH THE INSTRUCTION AFTER JSR CALL
	 
	
END
	BR ENTERINPUT			;GO TO USERINPUT



HALT



;FILLS
	EXIT		.FILL #-120
	NEGATIVE	.FILL #-45
	ZERO		.FILL #-48
	ZERO1		.FILL #48

;STRINGS
	GREETING	.STRINGZ "Welcome to Binary Conversion Program\n"
	USERINPUT	.STRINGZ "\nPlease enter a decimal number or 'x' to quit:\n"
	THANKYOU	.STRINGZ "Thanks. Here it is in binary:\n"
	BYE		.STRINGZ "\nBye. Have a great day"

MASK	.FILL	x8000
	.FILL	x4000
	.FILL	x2000
	.FILL	x1000
	.FILL	x0800
	.FILL	x0400
	.FILL	x0200
	.FILL	x0100
	.FILL	x0080
	.FILL	x0040
	.FILL	x0020
	.FILL	x0010
	.FILL	x0008
	.FILL	x0004
	.FILL	x0002
	.FILL	x0001

.END